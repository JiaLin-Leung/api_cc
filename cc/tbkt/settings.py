"""
Django settings for cc project.

Generated by 'django-admin startproject' using Django 3.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import json
import logging
log = logging.getLogger(__name__)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# 读取数据库配置文件
config_file = os.path.join(BASE_DIR, '.env')
with open(config_file, "rb") as f:
    config = f.read()
    DATABASES_CONFIG = json.loads(config)

DB_ENGINE = 'django.db.backends.mysql'
DB_WAIT_TIMEOUT = 20  # 单个连接最长维持时间
DB_POOL_SIZE = 8  # 连接池最大连接数

DATABASES = {
    'default': {
        'NAME': 'tbkt_yw',  # 语文资源
        'ENGINE': DB_ENGINE,
        'USER': DATABASES_CONFIG['YUWEN_SOURCE_USER'],  # Not used with sqlite3.
        'PASSWORD': DATABASES_CONFIG['YUWEN_SOURCE_PASSWORD'],  # Not used with sqlite3.
        'HOST': DATABASES_CONFIG['YUWEN_SOURCE_HOST'],  # Set to empty string for localhost. Not used with sqlite3.
        'PORT': DATABASES_CONFIG['YUWEN_SOURCE_PORT'],
        'OPTIONS': {
            'init_command': "SET sql_mode ='STRICT_TRANS_TABLES' "
        }
    },
    'tbkt_ywscsf': {
        'NAME': 'tbkt_ywscsf',  # 语文资源
        'ENGINE': DB_ENGINE,
        'USER': DATABASES_CONFIG['YUWEN_SOURCE_USER'],  # Not used with sqlite3.
        'PASSWORD': DATABASES_CONFIG['YUWEN_SOURCE_PASSWORD'],  # Not used with sqlite3.
        'HOST': DATABASES_CONFIG['YUWEN_SOURCE_HOST'],  # Set to empty string for localhost. Not used with sqlite3.
        'PORT': DATABASES_CONFIG['YUWEN_SOURCE_PORT'],
        'OPTIONS': {
            'init_command': "SET sql_mode ='STRICT_TRANS_TABLES' "
        }
    },

}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '240897'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if DATABASES_CONFIG['DEBUG'] == "True" else False

ALLOWED_HOSTS = ['*']

# 缓存开关
CACHE_OPEN = DATABASES_CONFIG["CACHE_OPEN"]
# 接口文档
APIDOC_DIR = os.path.join(BASE_DIR, '../docs/apidoc/')

PROJECT_KEY = 'base_sys_api_dj'  # 项目key生成api间密匙key
MEDIA_ROOT = 'static/'
# 缓存内网地址
TBKT_HOST = DATABASES_CONFIG.get("TBKT_HOST", "")


# token cookies 属性
SESSION_COOKIE_NAME = "tbkt_token"
SESSION_COOKIE_AGE = 7*24*60*60
# SESSION_COOKIE_DOMAIN = DATABASES_CONFIG["ROOT_URL"]
DOMAIN = DATABASES_CONFIG["DOMAIN"]
# 公共缓存key统一管理
CACHE_KEYS = {}
for k, v in DATABASES_CONFIG.items():

    if k.startswith('CACHE_KEY_'):
        try:
            alias = k[10:].lower()
            rows = v.split('|')
            real_key = rows[0]
            timeout = int(rows[1])
            CACHE_KEYS[alias] = {'real_key': real_key, 'timeout': timeout}
        except Exception as e:
            log.error(e)
            pass
    # if k.startswith('CACHE_KEY_BASE_'):
    #     try:
    #         alias = k[15:].lower()
    #         rows = v.split('|')
    #         real_key = rows[0]
    #         timeout = int(rows[1])
    #         CACHE_KEYS[alias] = {'real_key': real_key, 'timeout': timeout}
    #     except Exception as e:
    #         log.error(e)
    #         pass
    # if k.startswith('CACHE_KEY_CLASS_'):
    #     try:
    #         alias = k[16:].lower()
    #         rows = v.split('|')
    #         real_key = rows[0]
    #         timeout = int(rows[1])
    #         CACHE_KEYS[alias] = {'real_key': real_key, 'timeout': timeout}
    #     except Exception as e:
    #         log.error(e)
    #         pass
# 接口地址字典
API_URLROOT = {}
for k, v in DATABASES_CONFIG.items():
    if k.startswith('API_URL_'):
        try:
            alias = k[8:].lower()
            API_URLROOT[alias] = v
        except Exception as e:
            log.info(e)
            pass

INSTALLED_APPS = (
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # 'django.contrib.sessions',
    # 'django.contrib.messages',
    # 'django.contrib.staticfiles',
    'rest_framework',
)

MIDDLEWARE = (
    'tbkt.middleware.AuthenticationMiddleware',
)

ROOT_URLCONF = 'tbkt.urls'

WSGI_APPLICATION = 'cc.wsgi.application'

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Etc/GMT-8'

USE_I18N = True

USE_L10N = True

USE_TZ = True


STATIC_URL = '/static/'


if not DEBUG:
    # 阿里云日志服务
    # 运维平台需添加SLS关系和增加私有配置SLS_STORE=python、SLS_TOPIC=项目唯一标识(同下)
    # 项目唯一标识：例如lsjm_service项目的give_book服务可标记为lsjm_service.give_book或lsjm_service，便于区分查询日志
    # 需安装pip包  aliyun-log-python-sdk和uwsgidecorators
    # pip3 install aliyun-log-python-sdk
    # pip3 install uwsgidecorators
    ALI_SLS_ENDPOINT = DATABASES_CONFIG['TBKTLOG_SLS_ENDPOINT']  #  # 选择与上面步骤创建Project所属区域匹配的Endpoint
    ALI_SLS_ACCESSID = DATABASES_CONFIG['TBKTLOG_SLS_ACCESSID']    # 使用您的阿里云访问密钥AccessKeyId
    ALI_SLS_ACCESSKEY = DATABASES_CONFIG['TBKTLOG_SLS_ACCESSKEY']   # 使用您的阿里云访问密钥AccessKeySecret
    ALI_SLS_PROJECT = DATABASES_CONFIG['TBKTLOG_SLS_PROJECT']     # 日志项目名称
    ALI_SLS_STORE = DATABASES_CONFIG['TBKTLOG_SLS_STORE']         # Logstore名称在其所属项目内必须唯一
    ALI_SLS_TOPIC = DATABASES_CONFIG['TBKTLOG_SLS_TOPIC']         # 项目标示

    # 日志配置

    LOGDIR = os.path.join(BASE_DIR, "log")
    if not os.path.exists(LOGDIR):
        os.makedirs(LOGDIR)  # 创建路径


    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,  # 如果为True，默认的配置将被禁用，默认logger中的日志将会被丢弃且不传递到父logger，慎用True
        'filters': {
            'aliyun_filter': {  # 阿里云日志专用
                '()': 'cc.middleware.SlsFilter',
            },
        },
        'formatters': {
            'standard': {
                'format': '%(asctime)s [%(filename)s%(funcName)s:%(lineno)d] [%(levelname)s]- %(message)s'
            },
        },
        'handlers': {
            'default': {
                'level': 'WARNING',
                'formatter': 'standard',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': os.path.join(LOGDIR, 'app_web.log'),  # 或者直接写路径：'c:\logs\all.log',
                'mode': 'w+',
                'maxBytes': 1024 * 1024 * 5,  # 5 MB
                'backupCount': 5,
            },
            'console': {
                'level': 'INFO',
                'formatter': 'standard',
                'class': 'logging.StreamHandler',
            },
            'aliyun_handler': {
                'level': 'WARNING',
                'filters': ['aliyun_filter'],
                # 'class': 'aliyun.log.UwsgiQueuedLogHandler',
                'class': 'aliyun.log.SimpleLogHandler',   # 支持uwsgi，极端情况下测试使用，不推荐生成环境使用
                'access_key_id': ALI_SLS_ACCESSID,
                'access_key': ALI_SLS_ACCESSKEY,
                'end_point': ALI_SLS_ENDPOINT,
                'project': ALI_SLS_PROJECT,
                'log_store': ALI_SLS_STORE,
                'topic': ALI_SLS_TOPIC,
                'extract_json': True,
                'extract_json_drop_message': True

            },
        },
        'loggers': {
            'django': {
                'handlers': ['default', 'aliyun_handler'],
                'level': 'ERROR',
                'propagate': False
            },
            'django.request': {
                'handlers': ['default', 'aliyun_handler'],
                'level': 'ERROR',
                'propagate': False
            },
        },
        "root": {
            'handlers': ['default', 'aliyun_handler'],
            'level': "INFO",
            'propagate': False
        }
    }
else:
    # 日志写到标准输出
    logging.basicConfig(level=logging.INFO,
                        format='APP: %(asctime)s %(filename)-12s %(funcName)s %(levelname)-8s %(lineno)s %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        filemode='w')
